=> Selection sort is a simple and efficient sorting algorithm that works by repeatedly selecting the smallest (or largest) element 
    from the unsorted portion of the list and moving it to the sorted portion of the list.
=> The algorithm repeatedly selects the smallest (or largest) element from the unsorted portion of the list and swaps it with the first element of the unsorted part. 
    This process is repeated for the remaining unsorted portion until the entire list is sorted. 

How does Selection Sort Algorithm work?
========================================
Lets consider the following array as an example: arr[] = {64, 25, 12, 22, 11}

First pass:
-> For the first position in the sorted array, the whole array is traversed from index 0 to 4 sequentially. 
-> The first position where 64 is stored presently, after traversing whole array it is clear that 11 is the lowest value.
-> Thus, replace 64 with 11. After one iteration 11, which happens to be the least value in the array, tends to appear in the first position of the sorted list.
-> arr[] = {11, 25, 12, 22, 64}

Second Pass:
-> For the second position, where 25 is present, again traverse the rest of the array in a sequential manner.
-> After traversing, we found that 12 is the second lowest value in the array and it should appear at the second place in the array, thus swap these values.
-> arr[] = {11, 12, 25, 22, 64}

Third Pass:
-> Now, for third place, where 25 is present again traverse the rest of the array and find the third least value present in the array.
-> While traversing, 22 came out to be the third least value and it should appear at the third place in the array, thus swap 22 with element present at third position.
-> arr[] = {11, 12, 22, 25, 64}

Fourth pass:
-> Similarly, for fourth position traverse the rest of the array and find the fourth least element in the array 
-> As 25 is the 4th lowest value hence, it will place at the fourth position.
-> arr[] = {11, 12, 22, 25, 64}

Fifth Pass:
-> At last the largest value present in the array automatically get placed at the last position in the array
-> The resulted array is the sorted array.
-> arr[] = {11, 12, 22, 25, 64}

===========================Example===========================
// Java program for implementation of Selection Sort 
import java.io.*; 
public class SelectionSort { 
	void sort(int arr[]) { 
		int n = arr.length; 
		// One by one move boundary of unsorted subarray 
		for (int i = 0; i < n-1; i++) { 
			// Find the minimum element in unsorted array 
			int min_idx = i; 
			for (int j = i+1; j < n; j++) 
				if (arr[j] < arr[min_idx]) 
					min_idx = j; 

			// Swap the found minimum element with the first 
			// element 
			int temp = arr[min_idx]; 
			arr[min_idx] = arr[i]; 
			arr[i] = temp; 
		} 
	} 

	// Prints the array 
	void printArray(int arr[]) { 
		int n = arr.length; 
		for (int i=0; i<n; ++i) 
			System.out.print(arr[i]+" "); 
		System.out.println(); 
	} 

	// Driver code to test above 
	public static void main(String args[]) { 
		SelectionSort ob = new SelectionSort(); 
		int arr[] = {64,25,12,22,11}; 
		ob.sort(arr); 
		System.out.println("Sorted array"); 
		ob.printArray(arr); 
	} 
} 
==========================NOTES=============================
Time Complexities:
-------------------
=> Worst Case Complexity: O(n2)     => If we want to sort in ascending order and the array is in descending order then, the worst case occurs.
=> Best Case Complexity: O(n2)      =>It occurs when the array is already sorted
=> Average Case Complexity: O(n2)   => It occurs when the elements of the array are in jumbled order (neither ascending nor descending).

Advantages of Selection Sort Algorithm
--------------------------------------
=> Simple and easy to understand.
=> Works well with small datasets.

Disadvantages of the Selection Sort Algorithm
-----------------------------------------------
=> Selection sort has a time complexity of O(n^2) in the worst and average case.
=> Does not work well on large datasets.
=> Does not preserve the relative order of items with equal keys which means it is not stable.

Frequently Asked Questions on Selection Sort
---------------------------------------------
Q1. Is Selection Sort Algorithm stable?
=> The default implementation of the Selection Sort Algorithm is not stable. However, it can be made stable. Please see the stable Selection Sort for details.

Q2. Is Selection Sort Algorithm in-place?
=> Yes, Selection Sort Algorithm is an in-place algorithm, as it does not require extra space.
