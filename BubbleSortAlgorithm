1. BUBBLE SORT
==============
=> Sort the elements in ascending order.
=> In bubble sort algorithm, array is traversed from first element to last element.
=> Here, current element is compared with the next element. If current element is greater than the next element, it is swapped.

Working of Bubble Sort:
-----------------------
Suppose we are trying to sort the elements in ascending order.

1. First Iteration (Compare and Swap)
=> Starting from the first index, compare the first and the second elements.
=> If the first element is greater than the second element, they are swapped.
=> Now, compare the second and the third elements. Swap them if they are not in order. This process goes on until the last element

2. Remaining Iteration
=> The same process goes on for the remaining iterations.
=> After each iteration, the largest element among the unsorted elements is placed at the end.
=> In each iteration, the comparison takes place up to the last unsorted element.
=> The array is sorted when all the unsorted elements are placed at their correct positions.

Bubble Sort Code in Java:
-------------------------
// Bubble sort in Java
import java.util.Arrays;
class Main {
  // perform the bubble sort
  static void bubbleSort(int array[]) {
    int size = array.length;
    // loop to access each array element
    for (int i = 0; i < size - 1; i++)
      // loop to compare array elements
      for (int j = 0; j < size - i - 1; j++)
        // compare two adjacent elements
        // change > to < to sort in descending order
        if (array[j] > array[j + 1]) {
          // swapping occurs if elements
          // are not in the intended order
          int temp = array[j];
          array[j] = array[j + 1];
          array[j + 1] = temp;
        }
  }

  public static void main(String args[]) {
    int[] data = { -2, 45, 0, 11, -9 };
    // call method using class name
    Main.bubbleSort(data);
    System.out.println("Sorted Array in Ascending Order:");
    System.out.println(Arrays.toString(data));
  }
}

Optimized Bubble Sort Algorithm:
---------------------------------
=> In the above algorithm, all the comparisons are made even if the array is already sorted.
=> This increases the execution time.
=> To solve this, we can introduce an extra variable swapped. The value of swapped is set true if there occurs swapping of elements. Otherwise, it is set false.
=> After an iteration, if there is no swapping, the value of swapped will be false. This means elements are already sorted and there is no need to perform further iterations.
=> This will reduce the execution time and helps to optimize the bubble sort.

Optimized Bubble Sort in Java
-----------------------------
// Optimized Bubble sort in Java
import java.util.Arrays;
class Main {
  // perform the bubble sort
  static void bubbleSort(int array[]) {
    int size = array.length;
    // loop to access each array element
    for (int i = 0; i < (size-1); i++) {
      // check if swapping occurs
      boolean swapped = false;
      // loop to compare adjacent elements
      for (int j = 0; j < (size-i-1); j++) {
        // compare two array elements
        // change > to < to sort in descending order
        if (array[j] > array[j + 1]) {
          // swapping occurs if elements
          // are not in the intended order
          int temp = array[j];
          array[j] = array[j + 1];
          array[j + 1] = temp;
          swapped = true;
        }
      }
      // no swapping means the array is already sorted
      // so no need for further comparison
      if (!swapped)
        break;
    }
  }

  public static void main(String args[]) {
    int[] data = { -2, 45, 0, 11, -9 };
    // call method using the class name
    Main.bubbleSort(data);
    System.out.println("Sorted Array in Ascending Order:");
    System.out.println(Arrays.toString(data));
  }
}


=======================JAVA STREAMS===========================
METHOD 1:
---------
List<Integer> intList = Arrays.asList(7,4,6,3,9,1,0,-4);
List<Integer> list = intList.stream().sorted().collect(Collectors.toList());
System.out.println("list=>"+list); // list=>[-4, 0, 1, 3, 4, 6, 7, 9]

METHOD 2:
---------
List<Integer> intList = Arrays.asList(7,4,6,3,9,1,0,6,-4);
List<Integer> list = intList.stream().sorted((i1,i2)->i1.compareTo(i2)).collect(Collectors.toList());
System.out.println("list=>"+list); // list=>[-4, 0, 1, 3, 4, 6, 6, 7, 9]

======================INTERVIW QUESTIONS========================
1. What is the best-case runtime complexity of standard bubble sort?
=> The best-case runtime complexity of standard bubble sort is O(n) when the input array is already sorted, and no element swap is needed.
=> let myArray = [3, 4, 7, 10, 12];
=> console.log(bubbleSort(myArray)); // returns [3, 4, 7, 10, 12]

2. What is the time and space complexity of bubble sort?
=> The time complexity of bubble sort is O(n^2), where n is the number of elements in the array. 
=> The space complexity of bubble sort is O(1) because it uses only a constant amount of extra memory.

3. What type of algorithm is bubble sort?
=> Bubble sort is a simple sorting algorithm that repeatedly loops through a list, compares adjacent elements, and swaps them if they are in the wrong order.

4. What is the best-case time complexity of bubble sort?
=> The best-case time complexity of bubble sort is O(n), where n is the number of elements in the array. 
=> This occurs when the input array is already sorted, and no element swap is needed.

5. What is the average case complexity of bubble sort?
=> The average case complexity of bubble sort is O(n^2), where n is the number of elements in the array. 
=> This occurs when the input array is unsorted, and multiple elements have to be swapped.

6. What is the worst time complexity of bubble sort?
=> The worst time complexity of bubble sort is O(n^2), where n is the number of elements in the array. 
=> This occurs when the input array is reverse sorted, and every element has to be swapped.

